Leetcode 175. Combine Two Tables

| 類型                | 說明                                     | 圖示概念      |
| ------------------- | ------------------------ ---------------- | --------- |
| **INNER JOIN**      | 只取兩邊都有對應資料的部分                | A ∩ B（交集） |
| **LEFT JOIN**       | 以左邊表為主，右邊沒有對應則顯示 NULL     | A ⟕ B        |
| **RIGHT JOIN**      | 以右邊表為主，左邊沒有對應則顯示 NULL      | A ⟖ B       |
| **FULL OUTER JOIN** | 左右兩邊的資料全部都要，沒對應的用 NULL 補 | A ∪ B       |
| **CROSS JOIN**      | 不考慮對應欄位，每筆都配每筆（笛卡兒積）     | A × B     |


| 目的                               | 使用                                           |
| -------------------------------- | -------------------------------------------- |
| 找出有對應資料的記錄               | `INNER JOIN`                                 |
| 保留主資料表所有資料（例如所有人） | `LEFT JOIN`                                  |
| 查找資料是否孤兒（沒對應）         | `LEFT JOIN` + `WHERE right_table.id IS NULL` |
| 所有資料都要，不管有沒有關聯        | `FULL OUTER JOIN`（或模擬）                       |
| 所有組合都要（不建議）              `CROSS JOIN`                                 |

JOIN 條件一定要明確指定（用 ON 或 USING）
如果 JOIN 的表是 1 對多（例如一個 user 有多個 order），結果會「變多筆」用子查詢或 ROW_NUMBER()
ON 是 JOIN 條件（關聯欄位）
WHERE 是篩選結果

JOIN 是強大的資料關聯工具，但不設條件、選錯類型、沒索引，就會讓資料爆炸或效率超差。

如果資料超過幾十萬筆，沒索引 JOIN 會非常慢，甚至拖垮整個服務。
有些查詢其實不需要 JOIN，可以分兩次查詢處理，更清楚、效能更好。

JOIN 要：快、準、清、穩、能擴

快 → 加索引、簡化查詢
準 → JOIN 條件對、資料筆數準
清 → 欄位命名明確、邏輯清晰
穩 → 能處理空值、異常、不漏資料
能擴 → 加欄位不破壞、可維護性好

邏輯解釋 +  程式碼



